// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// readVCFgenotypes
SEXP readVCFgenotypes(std::string filename, std::string regions);
RcppExport SEXP _readVCF_readVCFgenotypes(SEXP filenameSEXP, SEXP regionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type regions(regionsSEXP);
    rcpp_result_gen = Rcpp::wrap(readVCFgenotypes(filename, regions));
    return rcpp_result_gen;
END_RCPP
}
// test_htsVCF
int test_htsVCF(std::string filename, std::vector<std::string> regions);
RcppExport SEXP _readVCF_test_htsVCF(SEXP filenameSEXP, SEXP regionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type regions(regionsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_htsVCF(filename, regions));
    return rcpp_result_gen;
END_RCPP
}
// test1
int test1(std::string s);
RcppExport SEXP _readVCF_test1(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(test1(s));
    return rcpp_result_gen;
END_RCPP
}
// test2
int test2(std::string s, std::string tok);
RcppExport SEXP _readVCF_test2(SEXP sSEXP, SEXP tokSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type tok(tokSEXP);
    rcpp_result_gen = Rcpp::wrap(test2(s, tok));
    return rcpp_result_gen;
END_RCPP
}
// test3
std::string test3(std::string s, int pos);
RcppExport SEXP _readVCF_test3(SEXP sSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(test3(s, pos));
    return rcpp_result_gen;
END_RCPP
}
// test4
Rcpp::IntegerVector test4();
RcppExport SEXP _readVCF_test4() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test4());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_readVCF_readVCFgenotypes", (DL_FUNC) &_readVCF_readVCFgenotypes, 2},
    {"_readVCF_test_htsVCF", (DL_FUNC) &_readVCF_test_htsVCF, 2},
    {"_readVCF_test1", (DL_FUNC) &_readVCF_test1, 1},
    {"_readVCF_test2", (DL_FUNC) &_readVCF_test2, 2},
    {"_readVCF_test3", (DL_FUNC) &_readVCF_test3, 2},
    {"_readVCF_test4", (DL_FUNC) &_readVCF_test4, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_readVCF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
